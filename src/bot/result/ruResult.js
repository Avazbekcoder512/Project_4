const { createClient } = require("@supabase/supabase-js");
const axios = require('axios');
const { ruMenyu } = require("../menyuKeyboard");
require('dotenv').config()

const supabaseUrl = process.env.Supabase_URL;
const supabaseKey = process.env.Supabase_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

exports.ruResult = async (ctx) => {
    if (!ctx.session) ctx.session = {};

    if (!ctx.session.waitingForOrder) {
        ctx.session.waitingForOrder = true;
        await ctx.reply("üìÑ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:", {
            reply_markup: { force_reply: true },
        });
        return;
    }

    if (!ctx.session.orderNumber) {
        if (!/^\d+$/.test(ctx.message.text)) {
            return await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!");
        }

        ctx.session.orderNumber = ctx.message.text;
        await ctx.reply("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥:", {
            reply_markup: { force_reply: true },
        });
        return;
    }

    const orderNumber = ctx.session.orderNumber;
    const verificationCode = ctx.message.text;

    ctx.session.waitingForOrder = false;
    ctx.session.orderNumber = null;

    try {
        const response = await axios.get("https://project-4-c2ho.onrender.com/download-result", {
            params: { orderNumber, verificationCode },
            responseType: "arraybuffer",
            validateStatus: (status) => status < 500
        });

        if (response.status === 429) {
            return await ctx.reply("–¢—ã —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!")
        }

        if (response.status === 200) {
            const timestamp = Date.now();
            const pdfFilename = `pdf/result_${orderNumber}_${timestamp}.pdf`;

            const { data, error } = await supabase
                .storage
                .from("Images")
                .upload(pdfFilename, response.data, {
                    contentType: "application/pdf",
                    cacheControl: "3600",
                    upsert: true
                });

            if (error) {
                console.log("‚ùå Supabase upload error:", error);
                return await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF-—Ñ–∞–π–ª–∞.");
            }

            const { data: urlData } = supabase
                .storage
                .from("Images")
                .getPublicUrl(pdfFilename);

            if (!urlData || !urlData.publicUrl) {
                return await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞.");
            }

            const publicURL = urlData.publicUrl;

            await ctx.reply("‚úÖ –ö–æ–¥—ã –≤–µ—Ä–Ω—ã! –ó–∞–≥—Ä—É–∑–∫–∞ PDF-—Ñ–∞–π–ª–∞...");
            await ctx.replyWithDocument(publicURL, {
                caption: `üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞`,
            });
            await ruMenyu(ctx)

            setTimeout(async () => {
                const filePath = publicURL.replace(
                    `${supabase.storageUrl}/object/public/Images/`,
                    ""
                );
                await supabase.storage.from("Images").remove([filePath]);
            }, 60000);
        } else if (response.status === 404) {
            await ctx.reply("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        } else {
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.");
        }
    } catch (error) {
        console.log("‚ùå Xatolik:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.");
    }
};